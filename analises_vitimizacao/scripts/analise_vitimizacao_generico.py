# -*- coding: utf-8 -*-
"""analise_vitimizacao.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s1r7YHtUBUDE5wKploEqdLASRFxaMdqb

# Instala√ß√£o de Bibliotecas
"""

#pip install tabula-py PyMuPDF openpyxl seaborn

"""# üß© Etapa 1: Preparar o Ambiente"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import tabula
import fitz  # PyMuPDF
import os

sns.set_theme(style="whitegrid")

"""# üìÇ Etapa 2: Carregar os Dados"""

# Caminhos dos arquivos (exemplo)
caminho_csv = "/caminho/para/dados.csv"
caminho_xlsx = "/caminho/para/dados.xlsx"
caminho_pdf = "/caminho/para/relatorio.pdf"

# CSV
try:
    dados_csv = pd.read_csv(caminho_csv)
    print("CSV carregado com sucesso.")
except Exception as e:
    print("Erro ao carregar CSV:", e)

# XLSX
try:
    dados_xlsx = pd.read_excel(caminho_xlsx)
    print("XLSX carregado com sucesso.")
except Exception as e:
    print("Erro ao carregar XLSX:", e)

# PDF (Tabular)
try:
    tabelas_pdf = tabula.read_pdf(caminho_pdf, pages='paginas', multiple_tables=True)
    print(f"{len(tabelas_pdf)} tabelas extra√≠das do PDF.")
except Exception as e:
    print("Erro ao extrair dados do PDF:", e)

"""# üîç Etapa 3: Tratamento e Amostragem dos Dados"""

# Tratamento de dados - Remo√ß√£o de nulos e padroniza√ß√£o de colunas

def tratar_dataframe(df):
    # Remover colunas completamente vazias
    df = df.dropna(axis=1, how='all')

    # Remover linhas completamente vazias
    df = df.dropna(axis=0, how='all')

    # Preencher valores nulos com string vazia ou zero (dependendo do tipo de dado)
    df = df.fillna('' if df.dtypes.any() == object else 0)

    # Padronizar nomes das colunas (remover espa√ßos, deixar min√∫sculo, substituir por underline)
    df.columns = [col.strip().lower().replace(' ', '_') for col in df.columns]

    return df

# Aplicar o tratamento nos dados, se existirem
if 'dados_csv' in locals():
    dados_csv = tratar_dataframe(dados_csv)

if 'dados_xlsx' in locals():
    dados_xlsx = tratar_dataframe(dados_xlsx)

if 'tabelas_pdf' in locals():
    tabelas_pdf = [tratar_dataframe(tabela) for tabela in tabelas_pdf]

print("Tratamento de dados conclu√≠do.")

# Exibir as 5 primeiras linhas de cada fonte (se carregadas)
if 'dados_csv' in locals():
    display(dados_csv.head())

if 'dados_xlsx' in locals():
    display(dados_xlsx.head())

if 'tabelas_pdf' in locals():
    for i, tabela in enumerate(tabelas_pdf):
        print(f"\nTabela {i+1} do PDF:")
        display(tabela.head())

"""# üìä Etapa 4: An√°lise Explorat√≥ria"""

# Verificar colunas dispon√≠veis
if 'dados_csv' in locals():
    print("Colunas CSV:", dados_csv.columns)

# Contagem por tipo de crime (exemplo)
if 'dados_csv' in locals() and 'TipoCrime' in dados_csv.columns:
    plt.figure(figsize=(10, 6))
    sns.countplot(data=dados_csv, y='TipoCrime', order=dados_csv['TipoCrime'].value_counts().index)
    plt.title("Distribui√ß√£o dos Tipos de Crime")
    plt.xlabel("Frequ√™ncia")
    plt.ylabel("Tipo de Crime")
    plt.show()

"""**Categoria A**"""



"""**Categoria B**"""



"""# üß† Etapa 5: Observar Padr√µes e Anomalias"""

# Tend√™ncia anual
if 'dados_csv' in locals() and 'Ano' in dados_csv.columns:
    tendencia = dados_csv.groupby('Ano').size()
    tendencia.plot(kind='line', marker='o', figsize=(10,5), title='Tend√™ncia de Ocorr√™ncias por Ano')
    plt.ylabel("N√∫mero de Ocorr√™ncias")
    plt.grid(True)
    plt.show()

# Comparar regi√µes
if 'dados_csv' in locals() and 'Regiao' in dados_csv.columns:
    plt.figure(figsize=(10,6))
    sns.countplot(data=dados_csv, x='Regiao', order=dados_csv['Regiao'].value_counts().index)
    plt.title("Distribui√ß√£o por Regi√£o")
    plt.xticks(rotation=45)
    plt.show()

"""**Categoria A**"""



"""**Conclus√£o**

TextoTextoTextoTextoTextoTextoTextoTextoTexto

**Categoria B**
"""



"""**Conclus√£o**

TextoTextoTextoTextoTextoTextoTextoTextoTexto

# üìù Etapa 6: Conclus√µes
"""

from IPython.display import Markdown

Markdown("""## Conclus√µes Preliminares

- Tend√™ncia: [Descrever aumento/quedas observadas]
- Regi√µes com destaque: [Citar regi√µes com maiores/menores ocorr√™ncias]
- Diferen√ßa entre fontes: [Comparar CSV/XLSX/PDF se aplic√°vel]
- Rela√ß√µes entre vari√°veis: [Exemplo: aumento de vitimiza√ß√£o em anos eleitorais]
""")

"""Texto detalhado com conclus√£o geral falando de cada analise

# üß© Etapa 7: Exportar Resultados
"""

# Exemplo: salvar CSV com dados limpos
if 'dados_csv' in locals():
    dados_csv.to_csv("dados_vitimizacao_limpos.csv", index=False)
    print("Dados exportados para 'dados_vitimizacao_limpos.csv'")